---
import BaseLayout from "../../../layouts/BaseLayout.astro"
import Link from "../../../components/Link.astro"
import Section from "../../../components/Section.astro"
import Loader from "../../../components/Loader.astro"

const back = "rgb(147, 128, 255, 0.3)"
---

<BaseLayout pageTitle="BB2" subPage="Ecosystems">
  <h1 class="text-2xl text-center font-monoDisplay-normal font-normal mb-4 sm:mb-8">BB2</h1>
  <Section classes="sm:flex sm:flex-grow sm:gap-4 px-4 sm:px-8">
    <section class="flex-col sm:w-3/5 sm:border-2 rounded-3xl border-cold-400/30 sm:h-[67vh] overflow-hidden">
      <div class="flex relative mx-2 sm:mr-4 items-center justify-center px-4 gap-16 border-b-2 border-cold-400/30 text-white">
        <input id="input" type="text" placeholder="Escribe aquí" class="p-2 text-center text-md bg-transparent font-splineSans-regular font-normal outline-none">
        <div id="search-icon" class="absolute right-2 cursor-pointer">
          <svg xmlns="http://www.w3.org/2000/svg" height="28" viewBox="0 -960 960 960" width="28">
            <path d="M80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q137 0 241.5 80T863-595q4 13-2 24.5t-18.879 14.773Q830-553 820-560.5q-10-7.5-14-19.5-22-74-74-131.5T607-799v18q0 35-24 61t-59 26h-87v87q0 16.575-13.5 27.787Q410-568 393-568h-83v88h80q12.75 0 21.375 8.625T420-450v95h-67L149-559q-5 20-7 39.667-2 19.666-2 39.333 0 128.02 82.5 223.51Q305-161 431-144q11.676 1.68 19.338 11.34Q458-123 458-110.5T448.859-90q-9.141 8-21.859 6-148-20-247.5-131.5T80-480Zm749 351L716-241q-21 15-45.5 23t-50.065 8q-71.015 0-120.725-49.618Q450-309.235 450-380.118 450-451 499.618-500.5q49.617-49.5 120.5-49.5Q691-550 740.5-500.29T790-379.565q0 25.565-8.5 50.065Q773-305 759-283l112 112q9 9 9.5 21t-8.5 21q-9 9-21.5 9t-21.5-9ZM619.859-270Q666-270 698-301.859q32-31.859 32-78T698.141-458q-31.859-32-78-32T542-458.141q-32 31.859-32 78T541.859-302q31.859 32 78 32Z" fill="currentColor"/></svg>
        </div>
      </div>
      <div 
        class="results-section sm:h-[59.5vh] sm:overflow-y-scroll flex flex-col pt-2 sm:px-2 results rounded-b-3xl">
        <div id="results-container" class="flex flex-col gap-2">      
        </div>
        <div class="mx-auto py-4">
          <Loader />
          <div id="see-more-button" class="hidden">
            <Link href="#">Ver más resultados</Link>            
          </div>
        </div>
      </div>
      <style define:vars={{back}}>
        @media (min-width: 576px) {
          .results::-webkit-scrollbar {
            width: 10px;
            height: 10px;
            background-color: transparent;
          }

          .results::-webkit-scrollbar-thumb {
            background-color: var(--back);
            border-radius: 6px 0 0 6px;
          }

          .results::-webkit-scrollbar-button {
            background-color: transparent;
          }

          .results::-webkit-scrollbar-track {
            background-color: var(--back);
            border-radius: 6px 0 0 6px;
          }
        }
      </style>
    </section>
    <section class="sm:w-2/5 hidden sm:flex flex-col items-center">
      <div class="flex-grow h-96 w-full bg-cold-600/50 rounded-3xl overflow-hidden relative">
        <img src="/img/map.png" class="h-full w-full object-cover absolute -z-10">
        <img id='map' class="h-full w-full object-cover hidden" alt="Mapa de avistamientos">
        <div class="absolute w-full flex justify-center bottom-6">
          <span id="map-status" class="font-splineSans-regular text-white hidden">Sin avistamientos registrados</span>
        </div>
      </div>
      <em id='species-name' class="text-2xl my-8 font-splineSans-regular">-</em>
    </section>
  </Section>
</BaseLayout>

<script>
  const input = document.querySelector('#input')
  const searchIcon = document.querySelector('#search-icon')
  const mapImage = document.querySelector('#map')
  const speciesName = document.querySelector('#species-name')
  const resultsContainer = document.querySelector("#results-container")
  const seeMoreButton = document.querySelector("#see-more-button")
  const elements = createElements()
  const stylizedElements = stylizeElements(elements)
  let inputValue = ''
  let offset = 0
  
  if(input instanceof HTMLInputElement && searchIcon instanceof HTMLDivElement) {
    input.addEventListener('keydown', async (event) => {
      if (event.key === 'Enter') {
        resultsContainer.innerHTML = ''
        inputValue = input.value
        await response(false)
      }
    })
    searchIcon.addEventListener('click', async () => {
      resultsContainer.innerHTML = ''
      inputValue = input.value
      await response(false)
    })
  }

  seeMoreButton.addEventListener('click', () => {
    response(true)
  })

  async function response(newElements) {
    toggleHidden('.results-section .loader')
    toggleHidden('#see-more-button', false)
    newElements ? offset += 20 : offset = 0

    const bioUrl = `https://api.gbif.org/v1/species/search?q=${inputValue}&limit=20&offset=${offset}&rank=species&datasetKey=d7dddbf4-2cf0-4f39-9b2a-bb099caae36c`
    const results = await fetchGbif(bioUrl)
    const tunedResults = getInfoFromResults(results)
    const readyElements = await setResults(stylizedElements, tunedResults)

    toggleHidden('.results-section .loader')
    printElements(readyElements)
  }

  function createElements() {
    const divContainer = document.createElement("div")

    const divSection1 = document.createElement("div")
    const divS11 = document.createElement("div")
    const divS12 = document.createElement("div")
    const em = document.createElement("em")
    const p = document.createElement("p")

    const divSection2 = document.createElement("div")
    const img = document.createElement("img")
    const divGradientEffect = document.createElement("div")

    return {divContainer, divSection1, divS11, divS12, em, p, divSection2, img, divGradientEffect}
  }

  function stylizeElements(elements) {
    const styles = {
      "divContainer" : "h-20 bg-cold-600 rounded-xl sm:hover:shadow-cold-500/50 shadow-md transition-all cursor-pointer duration-100 ease-in flex flex-grow-0 justify-between font-splineSans-regular font-normal relative overflow-hidden animate-fade-up animate-once animate-duration-300 animate-ease-out result-card",
      "divSection1" : "flex p-2 gap-4 z-20",
      "divS11" : "w-2 h-full bg-gradient-to-b from-cold-400/50 to-cold-400 rounded-full",
      "divS12" : "flex flex-col justify-center",
      "em" : "text-md",
      "p" : "text-sm",
      "divSection2" : "w-56 h-20 absolute right-0 z-10",
      "img" : "object-cover w-full h-full absolute -right-[1px]",
      "divGradientEffect" : "w-56 h-20 bg-gradient-to-r from-cold-600 to-transparent absolute top-0"
    }

    for (const key in elements) {
      const classString = styles[key];
      const classArray = classString.split(' ');
      classArray.forEach(className => {
        elements[key].classList.add(className);
      });
    }
    return elements
  }

  async function fetchGbif(url) {
    try {
      const response = await fetch(url)
      if (!response.ok) {
        throw new Error("Network response was not ok")
      }
      const data = await response.json()
      return data
    } catch (error) {
      throw error
    }
  }

  function getInfoFromResults(results) {
    let tunedResults = []
    const resultados = results.results
    resultados.map( async (record) => {
      const rank = record.rank.toLocaleLowerCase()
      const species = record.species
      const speciesKey = record.speciesKey
      tunedResults.push({rank, species, speciesKey})
    })
    return tunedResults
  }

  async function setResults(elements, results) {
    const resultElements = await Promise.all(results.map( async(result) => {
      const divContainer = elements.divContainer.cloneNode(true);
      const divSection1 = elements.divSection1.cloneNode(true);
      const divSection2 = elements.divSection2.cloneNode(true);
      const divS11 = elements.divS11.cloneNode(true);
      const divS12 = elements.divS12.cloneNode(true);
      const em = elements.em.cloneNode(true);
      const p = elements.p.cloneNode(true);
      const img = elements.img.cloneNode(true);
      const divGradientEffect = elements.divGradientEffect.cloneNode(true);

      em.innerText = result.species;
      p.innerText = `Rank: ${result.rank}`
      divS12.append(em, p)
      divSection1.append(divS11, divS12)
      await findImage(result.speciesKey)
        .then((url) => {
          img.setAttribute("src", url)
        })
      img.setAttribute("alt", result.species)
      divSection2.append(img, divGradientEffect)

      divContainer.append(divSection1, divSection2)
      divContainer.setAttribute('species-key', result.speciesKey)
      divContainer.setAttribute('species-name', result.species)
      divContainer.addEventListener('mouseenter', () => {
        const speciesKey = divContainer.getAttribute('species-key')
        const speciesName = divContainer.getAttribute('species-name')
        setMap(speciesKey, speciesName)
      })
      return divContainer
      }))
    return resultElements
  }

  async function findImage(key) {
    const url = `https://api.gbif.org/v1/species/${key}/media`
    const fetchResults = await fetchGbif(url)
    const list = fetchResults.results
    let getURL = list.find((item) => item.format.includes("image"))?.identifier
    return getURL ?? '/img/plants.jpg'
  }

  async function printElements(elements) {
    if (elements.length > 0) {
      for (const element of elements) {
        resultsContainer.appendChild(element)
        await wait(30)
      }
      toggleHidden('#see-more-button')
    } else {
      finishSearch()
    }
  }

  function wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  function finishSearch() {
    const message = 'Búsqueda finalizada'
    const span = document.createElement('span')
    span.innerText = message
    resultsContainer.append(span)
  }

  function toggleHidden(path, force = true) {
    const element = document.querySelector(path)
    if (!force) {
      element.classList.contains('hidden') ? null : element.classList.toggle('hidden')
      return
    }
    element.classList.toggle('hidden')
  }

  async function setMap(key, species) {
    toggleHidden('#map-status', false)
    mapImage.classList.remove('hidden')
    mapImage.setAttribute('src', `https://api.gbif.org/v2/map/occurrence/adhoc/0/0/0@1x.png?srs=EPSG:3857&speciesKey=${key}&style=blue.marker`)
    mapImage.addEventListener('error', () => {
      mapImage.classList.add('hidden')
      toggleHidden('#map-status')
    })
    speciesName.innerText = species
  }

  function setMapStatus() {
    
  }
</script>
