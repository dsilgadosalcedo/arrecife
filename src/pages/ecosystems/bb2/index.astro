---
import BaseLayout from "../../../layouts/BaseLayout.astro"
import Link from "../../../components/Link.astro"

const back = "rgb(147, 128, 255, 0.3)"
---

<BaseLayout pageTitle="BB2" subPage="Ecosystems">
  <h1 class="text-2xl text-center font-monoDisplay-normal font-normal mb-4 sm:mb-8">BB2</h1>
  <div class="sm:flex sm:flex-grow sm:gap-4 px-4 sm:px-8">
    <section class="flex-col sm:w-3/5 sm:border-2 rounded-3xl border-cold-400/30 sm:h-[67vh] overflow-hidden">
      <div class="flex relative mx-2 sm:mr-4 items-center justify-center px-4 gap-16 border-b-2 border-cold-400/30 text-white">
        <input id="input" type="text" placeholder="Escribe aqu√≠" class="p-2 text-center text-md bg-transparent font-splineSans-regular font-normal outline-none">
        <div id="search-icon" class="absolute right-2 cursor-pointer">
          <svg xmlns="http://www.w3.org/2000/svg" height="28" viewBox="0 -960 960 960" width="28">
            <path d="M80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q137 0 241.5 80T863-595q4 13-2 24.5t-18.879 14.773Q830-553 820-560.5q-10-7.5-14-19.5-22-74-74-131.5T607-799v18q0 35-24 61t-59 26h-87v87q0 16.575-13.5 27.787Q410-568 393-568h-83v88h80q12.75 0 21.375 8.625T420-450v95h-67L149-559q-5 20-7 39.667-2 19.666-2 39.333 0 128.02 82.5 223.51Q305-161 431-144q11.676 1.68 19.338 11.34Q458-123 458-110.5T448.859-90q-9.141 8-21.859 6-148-20-247.5-131.5T80-480Zm749 351L716-241q-21 15-45.5 23t-50.065 8q-71.015 0-120.725-49.618Q450-309.235 450-380.118 450-451 499.618-500.5q49.617-49.5 120.5-49.5Q691-550 740.5-500.29T790-379.565q0 25.565-8.5 50.065Q773-305 759-283l112 112q9 9 9.5 21t-8.5 21q-9 9-21.5 9t-21.5-9ZM619.859-270Q666-270 698-301.859q32-31.859 32-78T698.141-458q-31.859-32-78-32T542-458.141q-32 31.859-32 78T541.859-302q31.859 32 78 32Z" fill="currentColor"/></svg>
        </div>
      </div>
      <div 
        class="sm:h-[59.5vh] sm:overflow-y-scroll flex flex-col pt-2 sm:px-2 results rounded-b-3xl">
        <span id="span-loader" class="animate-spin animate-duration-[1400ms] text-3xl text-center hidden">üõ∞Ô∏è</span>
        <div id="results-container" class="flex flex-col gap-2">      
        </div>
        <div id="see-more-button" class="mx-auto py-4 hidden">
          <Link href="#">Ver m√°s resultados</Link>
        </div>
      </div>
      <style define:vars={{back}}>
        @media (min-width: 576px) {
          .results::-webkit-scrollbar {
            width: 10px;
            height: 10px;
            background-color: transparent;
          }

          .results::-webkit-scrollbar-thumb {
            background-color: var(--back);
            border-radius: 6px 0 0 6px;
          }

          .results::-webkit-scrollbar-button {
            background-color: transparent;
          }

          .results::-webkit-scrollbar-track {
            background-color: var(--back);
            border-radius: 6px 0 0 6px;
          }
        }
      </style>
    </section>
    <section class="sm:w-2/5 hidden sm:flex flex-col gap-8 items-center">
      <div class="w-full h-72 bg-cold-600 rounded-3xl"></div>
      <em class="text-2xl font-splineSans-regular">Morpho Catalic√©is</em>
      <Link href="#">Ver m√°s info</Link>
    </section>
  </div>
</BaseLayout>

<script type='module'>
  const input = document.querySelector('#input')
  const searchIcon = document.querySelector('#search-icon')

  if(input instanceof HTMLInputElement && searchIcon instanceof HTMLDivElement) {
    input.addEventListener("keydown", async (event) => {
      if (event.key === 'Enter') {
        await response(input.value)
      }
    })
    searchIcon.addEventListener('click', async () => {
      await response(input.value)
    })
  }

  // preload
  const elements = createElements()
  const stylizedElements = stylizeElements(elements)
  const resultsContainer = document.querySelector("#results-container")
  
  async function response(inputValue) {
    toggleLoader()
    const bioUrl = `https://api.gbif.org/v1/species/search?q=${inputValue}&rank=species&datasetKey=d7dddbf4-2cf0-4f39-9b2a-bb099caae36c`
    const results = await fetchGbif(bioUrl)
    const tunedResults = getInfoFromResults(results)
    const readyElements = await setResults(stylizedElements, tunedResults)

    toggleLoader()
    readyElements.length > 0 ? printElements(readyElements) : notFound()
  }

  function createElements() {
    const divContainer = document.createElement("div")

    const divSection1 = document.createElement("div")
    const divS11 = document.createElement("div")
    const divS12 = document.createElement("div")
    const em = document.createElement("em")
    const p = document.createElement("p")

    const divSection2 = document.createElement("div")
    const img = document.createElement("img")
    const divGradientEffect = document.createElement("div")

    return {divContainer, divSection1, divS11, divS12, em, p, divSection2, img, divGradientEffect}
  }

  function stylizeElements(elements) {
    const styles = {
      "divContainer" : "h-20 bg-cold-600 rounded-xl sm:hover:shadow-cold-500/50 shadow-md transition-all cursor-pointer duration-100 ease-in flex flex-grow-0 justify-between font-splineSans-regular font-normal relative overflow-hidden animate-fade-up animate-once animate-duration-300 animate-ease-out",
      "divSection1" : "flex p-2 gap-4 z-20",
      "divS11" : "w-2 h-full bg-gradient-to-b from-cold-400/50 to-cold-400 rounded-full",
      "divS12" : "flex flex-col justify-center",
      "em" : "text-md",
      "p" : "text-sm",
      "divSection2" : "w-56 h-20 absolute right-0 z-10",
      "img" : "object-cover w-full h-full absolute -right-[1px]",
      "divGradientEffect" : "w-56 h-20 bg-gradient-to-r from-cold-600 to-transparent absolute top-0"
    }

    for (const key in elements) {
      const classString = styles[key];
      const classArray = classString.split(' ');
      classArray.forEach(className => {
        elements[key].classList.add(className);
      });
    }
    return elements
  }

  async function fetchGbif(url) {
    try {
      const response = await fetch(url)
      if (!response.ok) {
        throw new Error("Network response was not ok")
      }
      const data = await response.json()
      return data
    } catch (error) {
      throw error
    }
  }

  function getInfoFromResults(results) {
    let tunedResults = []
    console.log(results)
    const resultados = results.results
    resultados.map( async (record) => {
      const rank = record.rank.toLocaleLowerCase()
      const species = record.species
      const speciesKey = record.speciesKey
      // const page = record.of
      tunedResults.push({rank, species, speciesKey})
    })
    console.log(tunedResults)
    return tunedResults
  }

  async function setResults(elements, results) {
    const resultElements = await Promise.all(results.map( async(result) => {
      const divContainer = elements.divContainer.cloneNode(true);
      const divSection1 = elements.divSection1.cloneNode(true);
      const divSection2 = elements.divSection2.cloneNode(true);
      const divS11 = elements.divS11.cloneNode(true);
      const divS12 = elements.divS12.cloneNode(true);
      const em = elements.em.cloneNode(true);
      const p = elements.p.cloneNode(true);
      const img = elements.img.cloneNode(true);
      const divGradientEffect = elements.divGradientEffect.cloneNode(true);

      em.innerText = result.species;
      p.innerText = `Rank: ${result.rank}`
      divS12.append(em, p)
      divSection1.append(divS11, divS12)

      const imageURL = await findImage(result.speciesKey)
      img.setAttribute("src", imageURL ? imageURL : "https://th.bing.com/th/id/OIG.mpRSv28onE3UXmvfCulB?pid=ImgGn")
      img.setAttribute("alt", result.species)
      divSection2.append(img, divGradientEffect)

      divContainer.append(divSection1, divSection2)
      return divContainer
      }))
    return resultElements
  }

  async function findImage(key) {
    const url = `https://api.gbif.org/v1/species/${key}/media`;
    const fetchResults = await fetchGbif(url);
    const getURL = (list) => {
      return list.find((item) => item.format.includes("image"))?.identifier;
    };
    const imageURL = getURL(fetchResults.results);
    return imageURL;
  }

  async function printElements(elements) {
    resultsContainer.innerHTML = ""
    toggleSeeMoreButton(true)
    for (const element of elements) {
      resultsContainer.appendChild(element)
      await wait(30)
    }
    if (elements.length > 0 ) toggleSeeMoreButton(false)
  }

  function wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  function notFound() {
    resultsContainer.innerHTML = "Intenta con otro nombre"
    toggleSeeMoreButton(true)
  }

  function toggleSeeMoreButton(showORhide) {
    const button = document.querySelector('#see-more-button')
    if (button instanceof HTMLDivElement) {
      showORhide ? button.classList.add('hidden') : button.classList.remove('hidden')
    }
  }

  function toggleLoader() {
    toggleSeeMoreButton(true)
    const loader = document.querySelector('#span-loader')
    resultsContainer.innerHTML = ""
    loader.classList.toggle('hidden')
  }
</script>
