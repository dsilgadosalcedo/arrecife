---
import BaseLayout from "../layouts/BaseLayout.astro"
import Section from "../components/Section.astro"
import CardsSection from "../components/CardsSection.astro"
import NewFeature from "../components/NewFeature.astro"

const pageTitle = "Arrecife"
---

<BaseLayout pageTitle={pageTitle}>
	<h1 class="
		my-24
		text-4xl sm:text-7xl text-center 
		font-splineSans-bold font-bold
		">
		Herramientas a
		<br>
		un clic <span class="text-purple-300">(o varios)</span>
  </h1>
	<div class="flex flex-col gap-24">
		<CardsSection />
		<NewFeature />
		<Section sectionTitle="La foto del día">
			<img id="apod-img" src="" alt="Mírate! Tú eres la foto del día" class="rounded-3xl w-full shadow-cold-400/20 shadow-lg">
			<div class="relative flex sm:justify-end">
				<a
					id="apod-explanation"
					lang="en" 
					href="./space/picture-of-the-day/"
					class="hidden sm:inline-block w-96 truncate absolute text-gray-300 text-sm font-splineSans-regular py-2 px-4 z-50 rounded-lg bg-cold-500/50 hover:bg-cold-500/80 overflow-hidden duration-200
					bottom-14 left-4"
					>
				</a>
				<a 
					id="apod-title"
					lang="en" 
					href="./space/picture-of-the-day/" 
					class="text-lg underline hover:text-cold-300 duration-200 mt-4 ml-6 sm:pr-6"
					>
				</a>
			</div>
		</Section>
	</div>

	<style>
		@keyframes show {
			from {
				opacity: 0.7;
				scale:80%;
			}
			to {
				opacity: 1;
				scale:100%;
			}
		}
		#apod-img {
			view-timeline-name: --revealing-image;
			animation-name:show;
			animation-fill-mode: both;

			animation-timeline: --revealing-image;
			animation-range: entry 5% cover 50%;
		}
	</style>

	<script type="module">
		const NASA_KEY='kmQOP13MoJhnRftKtbw8wEjK04O4xI6Dls8R0dc6'

		const data = await getApodData()
		
		const img = document.querySelector("#apod-img")
		const explanation = document.querySelector("#apod-explanation")
		const title = document.querySelector("#apod-title")
		
		img?.setAttribute("src", data.url)
		explanation.innerText = data.explanation || "Click to see more"
		title.innerText = data.title
		
		async function fetchApodData() {
			const NASA_TOKEN = NASA_KEY
			const apodApiUrl = `https://api.nasa.gov/planetary/apod?api_key=${NASA_TOKEN}`
			
			try {
				const response = await fetch(apodApiUrl);
				const rateLimitRemaining = response.headers.get("X-RateLimit-Remaining");
				if (!response.ok) {
					throw new Error("Network response was not ok");
				}
				
				const data = await response.json();
				data.rateLimitRemaining = rateLimitRemaining;
				return data;
			} catch (error) {
				throw error;
			}
		}

		function getCurrentDate() {
			const today = new Date();
			const year = today.getFullYear();
			const month = String(today.getMonth() + 1).padStart(2, '0');
			const day = String(today.getDate()).padStart(2, '0');
			return `${year}-${month}-${day}`;
		}

		function getApodDataFromCache() {
			let list = localStorage.getItem('listApodData');
			list = list && JSON.parse(list);
			return list
		}

		function getCurrentApodData() {
			const list = getApodDataFromCache() ? getApodDataFromCache() : [];
			const todayData = list && list.find(item => item.date === getCurrentDate());
			return todayData ? todayData : null;
		}
	
		function saveApodDataToCache(apodData) {
			const list = getApodDataFromCache() ? getApodDataFromCache() : [];
			list.push(apodData);
			localStorage.setItem('listApodData', JSON.stringify(list));
		}
	
		async function getApodData() {
			const cachedApodData = getCurrentApodData();
			if (cachedApodData && cachedApodData.date === getCurrentDate()) {
				return cachedApodData;
			} else {
				const newApodData = await fetchApodData();
				saveApodDataToCache(newApodData);
				console.log(newApodData.rateLimitRemaining);
				return newApodData;
			}
		}
	</script>
</BaseLayout>
